# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/safeMath.sem')

data controller

# Payout traders in markets
def init():
    self.controller = 0x0

# If it's an indeterminate market resolve with all outcomes having an equal value.
# @internal
def payoutIndeterminateBinaryOrCategoricalMarket(sender: address, market: address, event: address, numOutcomes: uint256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    branch = EVENTS.getEventBranch(event)
    currency = INFO.getCurrency(market)
    i = 1
    while(i <= numOutcomes):
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, i)
        if(sharesOwned > 0):
            MARKETS.getOutcomeShareContract(market, i).destroyShares(sender, sharesOwned)
            shareValue = safeDiv(sharesOwned, numOutcomes)
            fee = safeFxpMul(MARKETS.getTradingFee(market), shareValue)
            if(shareValue != 0):
                if(!INFO.getWallet(market).transfer(sender, safeSub(shareValue, fee))):
                    ~invalid()
            if(fee != 0):
                if(!INFO.getWallet(market).transfer(BRANCHES.getBranchWallet(branch, currency), fee - safeDiv(fee, 2))):
                    ~invalid()
                if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
                    ~invalid()
        i += 1
    return(1: uint256)

# Distribute profit to the people who won money by holding winning shares.
# @internal
def payoutBinaryOrCategoricalMarket(sender: address, market: address, event: address, numOutcomes: uint256):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)
    branch = EVENTS.getEventBranch(event)
    currency = INFO.getCurrency(market)
    outcome = EVENTS.getOutcome(event) / 10**18
    sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, outcome)
    if(sharesOwned > 0):
        MARKETS.getOutcomeShareContract(market, outcome).destroyShares(sender, sharesOwned)
        shareValue = sharesOwned
        fee = safeFxpMul(MARKETS.getTradingFee(market), shareValue)
        if(shareValue != 0):
            if(!INFO.getWallet(market).transfer(sender, safeSub(shareValue, fee))):
                ~invalid()
        if(fee != 0):
            if(!INFO.getWallet(market).transfer(BRANCHES.getBranchWallet(branch, currency), fee - safeDiv(fee, 2))):
                ~invalid()
            if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
                ~invalid()
    return(1: uint256)

# @controller
def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
