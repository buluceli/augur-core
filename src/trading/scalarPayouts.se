# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

# Payout traders in markets
def init():
    self.controller = 0x0

# @internal
def payoutScalarMarket(sender: address, market: address, event: address):
    assertNoValue()
    self.controller.assertIsWhitelisted(msg.sender)

    # Fetch outcome and min/max values for the event.
    outcome = EVENTS.getOutcome(event)
    minValue = EVENTS.getMinValue(event)
    maxValue = EVENTS.getMaxValue(event)
    currency = INFO.getCurrency(market)
    branch = EVENTS.getEventBranch(MARKETS.getMarketEvent(market))

    # Price is in fixed point
    # Share two goes with the high/long side
    share2Value = outcome - minValue
    # Share one goes with the low/short side of the calc
    share1Value = maxValue - outcome

    # For each winning outcome get rid of shares and send money to the trader

    # Low side
    sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, 1)
    if(sharesOwned > 0):
        MARKETS.getOutcomeShareContract(market, 1).destroyShares(sender, sharesOwned)
        shareValue = safeFxpMul(sharesOwned, share1Value)
        fee = safeFxpMul(MARKETS.getTradingFee(market), shareValue)
        if(shareValue != 0):
            if(!INFO.getWallet(market).transfer(sender, safeSub(shareValue, fee))):
                ~invalid()
        if(fee != 0):
            if(!INFO.getWallet(market).transfer(BRANCHES.getBranchWallet(branch, currency), fee - safeDiv(fee, 2))):
                ~invalid()
            if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
                ~invalid()

    # High side (of the scalar part)
    sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, 2)
    if(sharesOwned > 0):
        MARKETS.getOutcomeShareContract(market, 2).destroyShares(sender, sharesOwned)
        shareValue = safeFxpMul(sharesOwned, share2Value)
        fee = safeFxpMul(MARKETS.getTradingFee(market), shareValue)
        if(shareValue != 0):
            if(!INFO.getWallet(market).transfer(sender, safeSub(shareValue, fee))):
                ~invalid()
        if(fee != 0):
            if(!INFO.getWallet(market).transfer(BRANCHES.getBranchWallet(branch, currency), fee - safeDiv(fee, 2))):
                ~invalid()
            if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
                ~invalid()
    return(1: uint256)

# @controller
def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
