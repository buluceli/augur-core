# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

### Token wrapper for eth, which allows eth deposits and faucet usage for testing

macro MUTEX: self.controller.lookup('mutex')

inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')
inset('../macros/require.sem')

data controller
data owner
data initialized

data accounts[2**160](balance, spenders[2**160](maxValue))

data totalSupply
# token name for display
data name
# token symbol for display
data symbol
# amount of decimals per unit of rep
data decimals
# timestamp when withdraw was initiated
data initiated[]

event Transfer(from: address: indexed, to: address: indexed, value: int256)
event Approval(owner: address: indexed, spender: address: indexed, value: int256)
event DepositEther(sender: address: indexed, value: int256, balance: int256, timestamp: int256)
event WithdrawEther(sender: address: indexed, value: int256, balance: int256, timestamp: int256)
event InitiateWithdrawEther(sender: address: indexed, value: int256, balance: int256, timestamp: int256)

def init():
    self.owner = msg.sender

def initialize(controller: address):
    require(msg.sender == self.owner)
    require(not initialized)
    self.initialized = 1
    self.controller = controller
    self.name = "Cash"
    self.symbol = "CASH"
    self.decimals = 18

####################
# Public functions #
####################

def transfer(to: address, value: int256):
    assertNoValue()
    require(msg.sender != to)
    require(1 <= value and value <= self.accounts[msg.sender].balance)
    self.accounts[msg.sender].balance = safeSub(self.accounts[msg.sender].balance, value)
    self.accounts[to].balance = safeAdd(self.accounts[to].balance, value)
    log(type = Transfer, msg.sender, to, value)
    return(1)

def transferFrom(from: address, to: address, value: int256):
    assertNoValue()
    require(from != to)
    require(1 <= value and value <= self.accounts[from].balance)
    require(value <= self.accounts[from].spenders[msg.sender].maxValue)
    self.controller.stopInEmergency()
    self.accounts[from].spenders[msg.sender].maxValue = safeSub(self.accounts[from].spenders[msg.sender].maxValue, value)
    self.accounts[from].balance = safeSub(self.accounts[from].balance, value)
    self.accounts[to].balance = safeAdd(self.accounts[to].balance, value)
    log(type = Transfer, from, to, value)
    return(1)

def approve(spender: address, value: int256):
    assertNoValue()
    require(spender != msg.sender)
    require(0 <= value and value <= 2**254)
    self.controller.stopInEmergency()
    self.accounts[msg.sender].spenders[spender].maxValue = value
    log(type=Approval, msg.sender, spender, value)
    return(1)

def publicDepositEther():
    # NOTE: this check must be here because `self.depositEther` will not be called if msg.value == 0
    require(1 <= msg.value and msg.value <= 2**254 - self.totalSupply)
    MUTEX.acquire()
    self.controller.stopInEmergency()
    require(self.depositEther(msg.sender, value = msg.value))
    MUTEX.release()
    return(1)

def publicWithdrawEther(to: address, value: int256):
    assertNoValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    self.withdrawEther(msg.sender, to, value)
    MUTEX.release()
    return(1)

######################
# Internal functions #
######################

def depositEther(sender: address):
    assertPrivateCall()
    amount = msg.value
    self.accounts[sender].balance = safeAdd(self.accounts[sender].balance, amount)
    self.totalSupply = safeAdd(self.totalSupply, amount)
    log(type = DepositEther, sender, amount, self.accounts[sender].balance, block.timestamp)
    return(1)

def withdrawEther(sender: address, to: address, value: int256):
    assertNoValue()
    assertPrivateCall()
    require(1 <= value and value <= 2**254)
    initiatedTimestamp = self.initiated[sender]
    require(self.accounts[sender].balance >= value)
    require(safeToSubtract(self.accounts[sender].balance, value))
    require(safeToSubtract(self.totalSupply, value))
    if(not initiatedTimestamp):
        self.initiated[sender] = block.timestamp
        log(type = InitiateWithdrawEther, sender, value, self.accounts[sender].balance, block.timestamp)
        return(2)
    else:
        # FIXME: attacker can initiate a withdraw of 1 unit, wait 3 days, then launch an attack and then immeadiately withdraw everything
        require((initiatedTimestamp + 3 * SECONDS_PER_DAY) <= block.timestamp)
        self.accounts[sender].balance -= value
        self.totalSupply -= value
        self.initiated[sender] = 0
        require(send(to, value))
        log(type = WithdrawEther, sender, value, self.accounts[sender].balance, block.timestamp)
        return(1)

####################
# Getter functions #
####################

def allowance(owner: address, spender: address):
    assertNoValue()
    return(self.accounts[owner].spenders[spender].maxValue)

def totalSupply():
    assertNoValue()
    return(self.totalSupply)

def balanceOf(address: address):
    assertNoValue()
    return(self.accounts[address].balance)

def getName():
    assertNoValue()
    return(self.name)

def getDecimals():
    assertNoValue()
    return(self.decimals)

def getSymbol():
    assertNoValue()
    return(self.symbol)

def getInitiated():
    assertNoValue()
    return(self.initiated[msg.sender])

########################
# Controller functions #
########################

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
